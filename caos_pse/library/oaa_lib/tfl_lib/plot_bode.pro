; $Id: plot_bode.pro,v 1.5 2006/09/08 11:00:08 labot Exp $

;+
; NAME:
;    PLOT_BODE
;
; PURPOSE:
;
;    Plot_bode plots (or overplots) the amplitude and phase of a complex
;    transfer function. See amp_plot and phase_plot for more details.
;
; CATEGORY:
;
;    Plotting Routines, Digital Filtering
;
; CALLING SEQUENCE:
;
;    plot_bode, f_vec, complex_tf[, AUNITS=astr][, AYRANGE=pyr] $
;            [, PYRANGE=pyr][, /NOUNWRAP][, /COMPARISON]
;
; INPUTS:
;
;    f_vec:       real vector. Vector of frequencyes. Frequencies less
;                 or equal to zero are not considered.
;    complex_tf:  complex vector. Transfer function. The number of
;                 elements of complex_tf must be the same as f_vec.
;
;
; KEYWORD PARAMETERS:
;
;    DB:          If set, plot the amplitude axis in deciBel (dB)
;                 units.
;
;    AUNITS:      String containing the units of the amplitude axis.
;                 It is not considered if the DB keyword is used.
;
;    AYRANGE:     Y-axis range in the amplitude plot.
;
;    PYRANGE:     Y-axis range in the phase plot.
;
;    COMPARISON:  Set this keyword to overplot the bode plots over a
;                 plot generated by a previous plot_bode command.
;                 The previous keywords are not considered if this
;                 keyword is set.
;
;    SMOOTH:      set this keyword to a smoothing window size to plot
;                 smoothed data
;
;    All the keywords allowed in plot (or overplot if COMPARISON is set)
;    can be added to the calling sequence.
;
; COMMON BLOCKS:
;
;    plot_amp_block. Just for internal use.
;
; MODIFICATION HISTORY:
;
;       Nov 1998, written by A. Riccardi <riccardi@arcetri.astro.it>
;                 Osservatorio Astrofisico di Arcetri, ITALY
;
;       G. Brusa, Added COMPARISON and AUNITS keywords
;
;       Jul 2006, AR: added keyword SMOOTH
;-

pro plot_bode, f_vec, complex_tf, _EXTRA=extra_keyw, NO_UNWRAP=no_unwrap,$
				COMPARISON=comparison, AYRANGE=ayrange, PYRANGE=pyrange, $
				AUNITS=aunits, SMOOTH=smooth



	on_error, 2
	!p.multi[0]=0
	if !p.multi[1]*!p.multi[2] lt 2 then begin
		save_pmulti=!p.multi
		!p.multi=[0,2,1]
	endif

	if keyword_set(comparison) then begin
		!p.multi[0]=0
		plot_amp, f_vec, complex_tf, _EXTRA=extra_keyw, /comp, SMOOTH=smooth
		!p.multi[0]=1
		plot_phase, f_vec, complex_tf, _EXTRA=extra_keyw, NO_UNWRAP=no_unwrap,$
		/comp, SMOOTH=smooth
	endif else begin
		if keyword_set(ayrange) then begin
			plot_amp, f_vec, complex_tf, _EXTRA=extra_keyw,$
		;	xsty=1,ysty=1,$
					yrange=ayrange, aunits=aunits, SMOOTH=smooth
		endif else begin
			plot_amp, f_vec, complex_tf, _EXTRA=extra_keyw,aunits=aunits, SMOOTH=smooth
		;,xsty=1,ysty=1
		endelse
		if keyword_set(pyrange) then begin
			plot_phase, f_vec, complex_tf, _EXTRA=extra_keyw, $
				NO_UNWRAP=no_unwrap, yrange=pyrange, SMOOTH=smooth
			;	xsty=1,ysty=1
		endif else begin
			plot_phase, f_vec, complex_tf, _EXTRA=extra_keyw, $
				NO_UNWRAP=no_unwrap, SMOOTH=smooth
			;	,xsty=1,ysty=1

		endelse
	endelse

	if n_elements(save_pmulti) gt 0 then begin
		!p.multi=save_pmulti
		!p.multi[0]=0
	endif
end
